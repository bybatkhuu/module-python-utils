{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>'potato_utils' is collection of useful utils package for python.</p>"},{"location":"#features","title":"\u2728 Features","text":"<ul> <li>Python module/package</li> <li>Configuration</li> <li>Test</li> <li>Build</li> <li>Documentation</li> <li>Scripts</li> <li>Examples</li> <li>CI/CD</li> </ul>"},{"location":"release-notes/","title":"\ud83d\udccc Release Notes","text":""},{"location":"about/authors/","title":"\ud83e\uddd9\u200d\u2642\ufe0f Authors","text":"<p>This project is developed by the following authors:</p> <ul> <li>@bybatkhuu - Batkhuu Byambajav</li> </ul>","tags":["about"]},{"location":"about/contact/","title":"\ud83d\udcde Contact","text":"<p>You can contact me by email at batkhuu10@gmail.com.</p>","tags":["about"]},{"location":"about/faq/","title":"\u2753 FAQ","text":"<p>This section contains frequently asked questions about this project.</p>","tags":["about"]},{"location":"about/faq/#q1-how-do-i-get-started-with-this-project","title":"Q1: How do I get started with this project?","text":"<p>To get started with this project, follow the instructions in the Getting Started guide.</p>","tags":["about"]},{"location":"about/license/","title":"\u00a9\ufe0f License","text":"<p>This project is licensed as the <code>LICENSE.md</code> file for details.</p>","tags":["about"]},{"location":"api-docs/MyClass/","title":"MyClass","text":"<p>A class to perform some operations on a list of float items.</p> <p>Attributes:</p> Name Type Description <code>items</code> <code> (list[float]    </code> <p>List of float items to be processed.</p> <code>config</code> <code>MyClassConfigPM</code> <p>Configuration for the module.</p> <p>Methods:</p> Name Description <code>run</code> <p>Method to clean the items based on the threshold value.</p> Source code in <code>src/potato_utils/_base.py</code> <pre><code>class MyClass:\n    \"\"\"A class to perform some operations on a list of float items.\n\n    Attributes:\n        items  (list[float]    ): List of float items to be processed.\n        config (MyClassConfigPM): Configuration for the module.\n\n    Methods:\n        run(): Method to clean the items based on the threshold value.\n\n    \"\"\"\n\n    @validate_call\n    def __init__(\n        self,\n        items: list[float] | None = None,\n        config: MyClassConfigPM | dict[str, Any] | None = None,\n        auto_run: bool = False,\n        **kwargs,\n    ) -&gt; None:\n        \"\"\"Initializer method for the MyClass class.\n\n        Args:\n            items  (list[float] | None                     , optional): List of float items to be processed.\n                                                                            Defaults to None.\n            config (MyClassConfigPM | dict[str, Any] | None, optional): Configuration for the module. Defaults to None.\n        \"\"\"\n\n        logger.debug(\n            f\"Initializing &lt;{self.__class__.__name__}&gt; object with '{__version__}' version...\"\n        )\n        if not config:\n            config = MyClassConfigPM()\n\n        self.config = config\n        if kwargs:\n            self.config = self.config.model_copy(update=kwargs)\n\n        if items:\n            self.items = items\n        logger.debug(\n            f\"Initialized &lt;{self.__class__.__name__}&gt; object with '{__version__}' version.\"\n        )\n\n        if auto_run:\n            self.run()\n\n    @validate_call\n    def run(\n        self,\n        items: list[float] | None = None,\n        threshold: float | None = None,\n    ) -&gt; list[float]:\n        \"\"\"Method to clean the items based on the threshold value.\n\n        Args:\n            items     (list[float] | None, optional): List of float items to be processed. Defaults to None.\n            threshold (float | None      , optional): Threshold value for the cleaning process. Defaults to None.\n\n        Raises:\n            RuntimeError: If `items` attribute is not set.\n\n        Returns:\n            list[float]: List of cleaned items.\n        \"\"\"\n\n        if items:\n            self.items = items\n\n        if not hasattr(self, \"items\"):\n            raise RuntimeError(\n                \"`items` attribute is not set, must provide a list of float items to be processed!\"\n            )\n\n        if not threshold:\n            threshold = self.config.threshold\n\n        logger.debug(f\"Cleaning items with threshold '{threshold}'...\")\n        _clean_items = []\n        for _item in self.items:\n            if threshold &lt;= _item:\n                _clean_items.append(_item)\n            else:\n                logger.debug(\n                    f\"Item '{_item}' is below the threshold '{threshold}', removing it...\"\n                )\n\n        logger.debug(\"Successfully cleaned items.\")\n\n        self.items = _clean_items\n        return self.items\n\n    # ATTRIBUTES\n    # config\n    @property\n    def config(self) -&gt; MyClassConfigPM:\n        try:\n            return self.__config\n        except AttributeError:\n            self.__config = MyClassConfigPM()\n\n        return self.__config\n\n    @config.setter\n    def config(self, config: MyClassConfigPM | dict[str, Any]) -&gt; None:\n        if (not isinstance(config, MyClassConfigPM)) and (not isinstance(config, dict)):\n            raise TypeError(\n                f\"`config` attribute type {type(config)} is invalid, must be a &lt;class 'MyClassConfigPM'&gt; or &lt;dict&gt;!\"\n            )\n\n        if isinstance(config, dict):\n            config = MyClassConfigPM(**config)\n        elif isinstance(config, MyClassConfigPM):\n            config = config.model_copy(deep=True)\n\n        self.__config = config\n\n    # config\n\n    # items\n    @property\n    def items(self) -&gt; list[float]:\n        try:\n            return self.__items\n        except AttributeError:\n            raise AttributeError(\"`items` attribute is not set!\")\n\n    @items.setter\n    def items(self, items: list[float]) -&gt; None:\n        if not isinstance(items, list):\n            raise TypeError(\n                f\"`items` attribute type {type(items)} is invalid, must be a &lt;class 'list'&gt;!\"\n            )\n\n        if (len(items) &lt; self.config.min_length) or (\n            self.config.max_length &lt; len(items)\n        ):\n            raise ValueError(\n                f\"`items` attribute length '{len(items)}' is too short or too long, \"\n                f\"must be between '{self.config.min_length}' and '{self.config.max_length}'!\"\n            )\n\n        for _item in items:\n            if not isinstance(_item, float):\n                raise TypeError(\n                    f\"`items` attribute item type {type(_item)} is invalid, must be a &lt;float&gt;!\"\n                )\n\n            if (_item &lt; self.config.min_value) or (self.config.max_value &lt; _item):\n                raise ValueError(\n                    f\"`items` attribute item value '{_item}' is not in the allowed range, \"\n                    f\"must be between '{self.config.min_value}' and '{self.config.max_value}'!\"\n                )\n\n        self.__items = items\n\n    # items\n    # ATTRIBUTES\n\n    # METHOD OVERRIDING\n    def __str__(self):\n        _self_dict = utils.clean_obj_dict(self.__dict__, self.__class__.__name__)\n        _self_str = f\"{self.__class__.__name__}: {pprint.pformat(_self_dict)}\"\n        return _self_str\n\n    def __repr__(self):\n        _self_repr = utils.obj_to_repr(self)\n        return _self_repr\n</code></pre>","tags":["api-docs","api-reference"]},{"location":"api-docs/MyClass/#src.potato_utils.MyClass.__init__","title":"<code>__init__(items=None, config=None, auto_run=False, **kwargs)</code>","text":"<p>Initializer method for the MyClass class.</p> <p>Parameters:</p> Name Type Description Default <code>items</code> <code>list[float] | None</code> <p>List of float items to be processed.                                                             Defaults to None.</p> <code>None</code> <code>config</code> <code>MyClassConfigPM | dict[str, Any] | None</code> <p>Configuration for the module. Defaults to None.</p> <code>None</code> Source code in <code>src/potato_utils/_base.py</code> <pre><code>@validate_call\ndef __init__(\n    self,\n    items: list[float] | None = None,\n    config: MyClassConfigPM | dict[str, Any] | None = None,\n    auto_run: bool = False,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Initializer method for the MyClass class.\n\n    Args:\n        items  (list[float] | None                     , optional): List of float items to be processed.\n                                                                        Defaults to None.\n        config (MyClassConfigPM | dict[str, Any] | None, optional): Configuration for the module. Defaults to None.\n    \"\"\"\n\n    logger.debug(\n        f\"Initializing &lt;{self.__class__.__name__}&gt; object with '{__version__}' version...\"\n    )\n    if not config:\n        config = MyClassConfigPM()\n\n    self.config = config\n    if kwargs:\n        self.config = self.config.model_copy(update=kwargs)\n\n    if items:\n        self.items = items\n    logger.debug(\n        f\"Initialized &lt;{self.__class__.__name__}&gt; object with '{__version__}' version.\"\n    )\n\n    if auto_run:\n        self.run()\n</code></pre>","tags":["api-docs","api-reference"]},{"location":"api-docs/MyClass/#src.potato_utils.MyClass.run","title":"<code>run(items=None, threshold=None)</code>","text":"<p>Method to clean the items based on the threshold value.</p> <p>Parameters:</p> Name Type Description Default <code>items</code> <code>list[float] | None</code> <p>List of float items to be processed. Defaults to None.</p> <code>None</code> <code>threshold</code> <code>float | None</code> <p>Threshold value for the cleaning process. Defaults to None.</p> <code>None</code> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If <code>items</code> attribute is not set.</p> <p>Returns:</p> Type Description <code>list[float]</code> <p>list[float]: List of cleaned items.</p> Source code in <code>src/potato_utils/_base.py</code> <pre><code>@validate_call\ndef run(\n    self,\n    items: list[float] | None = None,\n    threshold: float | None = None,\n) -&gt; list[float]:\n    \"\"\"Method to clean the items based on the threshold value.\n\n    Args:\n        items     (list[float] | None, optional): List of float items to be processed. Defaults to None.\n        threshold (float | None      , optional): Threshold value for the cleaning process. Defaults to None.\n\n    Raises:\n        RuntimeError: If `items` attribute is not set.\n\n    Returns:\n        list[float]: List of cleaned items.\n    \"\"\"\n\n    if items:\n        self.items = items\n\n    if not hasattr(self, \"items\"):\n        raise RuntimeError(\n            \"`items` attribute is not set, must provide a list of float items to be processed!\"\n        )\n\n    if not threshold:\n        threshold = self.config.threshold\n\n    logger.debug(f\"Cleaning items with threshold '{threshold}'...\")\n    _clean_items = []\n    for _item in self.items:\n        if threshold &lt;= _item:\n            _clean_items.append(_item)\n        else:\n            logger.debug(\n                f\"Item '{_item}' is below the threshold '{threshold}', removing it...\"\n            )\n\n    logger.debug(\"Successfully cleaned items.\")\n\n    self.items = _clean_items\n    return self.items\n</code></pre>","tags":["api-docs","api-reference"]},{"location":"blog/","title":"\u270f\ufe0f Blog","text":"<p>This is the blog page. It will list all the blog posts.</p>","tags":["blog"]},{"location":"blog/2025/01/01/post-1/","title":"Post 1","text":"<p>Lorem ipsum odor amet, consectetuer adipiscing elit. Mus aptent habitant ornare scelerisque vulputate ridiculus. Justo lectus massa magna duis urna. Dui elit mi potenti duis placerat efficitur dui pretium velit. Nisl cubilia fringilla eros magnis torquent? Hac proin dis ligula at sagittis sed justo volutpat facilisis. Sem netus volutpat urna cras maximus ridiculus leo. Ad vivamus tortor luctus ac ac. Consectetur nulla aptent eleifend euismod sem aliquet auctor. Nisl sem porta platea tincidunt elit tellus lacus ligula tortor. Sagittis nascetur potenti ultrices euismod, aliquet non aenean. Convallis urna gravida quisque odio cras himenaeos odio tristique. Nibh bibendum tempor leo mi ante etiam. Euismod dis praesent natoque auctor dignissim enim condimentum. Et sapien consectetur habitasse, dignissim at eleifend. Fusce laoreet efficitur sem suscipit platea tortor purus cursus magnis.</p>","tags":["blog","Tag-1","Tag-2"]},{"location":"dev/build/","title":"\ud83c\udfd7\ufe0f Build Python Package","text":"<p>To build the python package, run the following command:</p> <pre><code># Install python build dependencies:\npip install -r ./requirements/requirements.build.txt\n\n# Build python package:\npython -m build\n# Or use the build script:\n./scripts/build.sh\n</code></pre>","tags":["dev","development"]},{"location":"dev/build/#build","title":"Build","text":"<pre><code># Install python build:\npip install -U build\n\n# Build help:\npython -m build --help\n</code></pre>","tags":["dev","development"]},{"location":"dev/build/#references","title":"References","text":"<ul> <li>Python Packaging User Guide</li> <li>Packaging Python Projects</li> <li>Writing your <code>pyproject.toml</code></li> <li>Setuptools Documentation</li> <li>Blogs:<ul> <li>Python Packaging Best Practices</li> <li>Generic Folder Structure for your Machine Learning Projects</li> <li>How to Upload your Python Package to PyPI</li> </ul> </li> </ul>","tags":["dev","development"]},{"location":"dev/contributing/","title":"\ud83e\udd1d Contributing","text":"<p>This project is encourages contributions!</p>","tags":["dev","development"]},{"location":"dev/diagrams/","title":"\ud83d\uddbc\ufe0f Diagrams","text":"<p>This page contains diagrams that illustrate the architecture of the module.</p>","tags":["dev","development"]},{"location":"dev/diagrams/#class","title":"Class","text":"","tags":["dev","development"]},{"location":"dev/diagrams/#package","title":"Package","text":"","tags":["dev","development"]},{"location":"dev/docs/","title":"\ud83d\udcdd Docs","text":"<p>To build the documentation, run the following command:</p> <pre><code># Install python documentation dependencies:\npip install -r ./requirements/requirements.docs.txt\n\n# Serve documentation locally (for development):\nmkdocs serve\n# Or use the docs script:\n./scripts/docs.sh\n\n# Or build documentation:\nmkdocs build\n# Or use the docs script:\n./scripts/docs.sh -b\n</code></pre>","tags":["dev","development"]},{"location":"dev/docs/#diagrams","title":"Diagrams","text":"<p>Prerequisites:</p> <ul> <li>Install Graphviz</li> </ul> <p>To generate diagrams, run the following command:</p> <pre><code># Install python documentation dependencies:\npip install -r ./requirements/requirements.docs.txt\n\n# Generate diagrams:\n./scripts/diagrams.sh\n</code></pre>","tags":["dev","development"]},{"location":"dev/docs/#mkdocs-material","title":"MkDocs Material","text":"","tags":["dev","development"]},{"location":"dev/docs/#installation","title":"Installation","text":"<pre><code># Install mkdocs-material and mkdocstrings:\npip install -U mkdocs-material mkdocstrings[python]\n</code></pre>","tags":["dev","development"]},{"location":"dev/docs/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>","tags":["dev","development"]},{"location":"dev/docs/#docs-layout","title":"Docs layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>","tags":["dev","development"]},{"location":"dev/docs/#references","title":"References","text":"<ul> <li>MkDocs Documentation</li> <li>MkDocs Material Documentation</li> <li>mkdocstrings Documentation</li> </ul>","tags":["dev","development"]},{"location":"dev/file-structure/","title":"\ud83d\udcc2 File Structure","text":"<pre><code>project/\n\u251c\u2500\u2500 .github/                # GitHub specific files\n|   \u251c\u2500\u2500 workflows/              # GitHub actions as workflows\n|   \u2514\u2500\u2500 release.yml             # Categories and labels for release notes\n\u251c\u2500\u2500 .vscode/                # VSCode specific files\n|   \u251c\u2500\u2500 extensions.json         # Recommended extensions for the workspace\n|   \u2514\u2500\u2500 settings.json           # Common VSCode settings for the workspace (e.g. formatting, linting, etc...)\n\u251c\u2500\u2500 build/                  # Build files and directories (SHOULD NOT BE COMMITTED TO REPOSITORY)\n\u251c\u2500\u2500 dist/                   # Built distributions of this project (SHOULD NOT BE COMMITTED TO REPOSITORY)\n\u251c\u2500\u2500 docs/                   # Documentation of this project\n|   \u251c\u2500\u2500 assets/                 # Any assets (images, audios, videos, js, css, html, etc...) used for the documentation\n|   \u251c\u2500\u2500 diagrams/               # Diagrams related to this project\n|   \u251c\u2500\u2500 blog/                   # Blog posts related to this project\n|   \u2514\u2500\u2500 .../                    # MkDocs pages - markdown files\n\u251c\u2500\u2500 examples/               # Example source codes of this project\n\u251c\u2500\u2500 requirements/           # Python dependency requirements for different environments\n\u251c\u2500\u2500 scripts/                # Helpful scripts to automate tasks or assist in the development process\n\u251c\u2500\u2500 site/                   # Built static site of the documentation (SHOULD NOT BE COMMITTED TO REPOSITORY)\n\u251c\u2500\u2500 src/                    # Source codes of this project\n|   \u251c\u2500\u2500 modules/                # External modules for this project\n|   |   \u251c\u2500\u2500 module_1/\n|   |   \u251c\u2500\u2500 module_2/\n|   |   \u2514\u2500\u2500 .../\n|   \u2514\u2500\u2500 potato_utils/            # Main CODEBASE of this project as a python module\n|       \u251c\u2500\u2500 __init__.py             # Initialize the module to be used as a package\n|       \u251c\u2500\u2500 __version__.py          # Version of the module (should be updated and used with each release)\n|       \u2514\u2500\u2500 ...                     # Other main python files of this module\n\u251c\u2500\u2500 templates/              # Template files (if any, e.g. config files, etc...) used in this project\n\u251c\u2500\u2500 tests/                  # Tests for this project\n|   \u251c\u2500\u2500 __init__.py             # Initialize the test module\n|   \u251c\u2500\u2500 conftest.py             # Presets for pytest (e.g. fixtures, plugins, pre/post test hooks, etc...)\n|   \u251c\u2500\u2500 test_1.py               # Test case files\n|   \u251c\u2500\u2500 test_2.py\n|   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 __init__.py             # Initialize the whole project as a python module to import from other modules\n\u251c\u2500\u2500 .editorconfig           # Editor configuration for consistent coding styles for different editors\n\u251c\u2500\u2500 .env                    # Environment variables file (SHOULD NOT BE COMMITTED TO REPOSITORY)\n\u251c\u2500\u2500 .env.example            # Example environment variables file\n\u251c\u2500\u2500 .gitignore              # Files and directories to be ignored by git (e.g. data, models, results, etc...)\n\u251c\u2500\u2500 .markdownlint.json      # Markdown linting rules\n\u251c\u2500\u2500 .pre-commit-config.yaml # Pre-commit configuration file\n\u251c\u2500\u2500 CHANGELOG.md            # List of changes for each version of the project\n\u251c\u2500\u2500 environment.yml         # Conda environment file\n\u251c\u2500\u2500 LICENSE.txt             # License file for this project\n\u251c\u2500\u2500 Makefile                # Makefile for common commands and automation\n\u251c\u2500\u2500 MANIFEST.in             # Manifest file for setuptools (to include/exclude files in the source distribution)\n\u251c\u2500\u2500 mkdocs.yml              # MkDocs configuration file\n\u251c\u2500\u2500 pyproject.toml          # PEP 518 configuration file for python packaging\n\u251c\u2500\u2500 pytest.ini              # Pytest configuration file\n\u251c\u2500\u2500 README.md               # Main README file for this project\n\u251c\u2500\u2500 requirements.txt        # Main python dependency requirements for this project\n\u251c\u2500\u2500 setup.cfg               # Configuration for setuptools\n\u2514\u2500\u2500 setup.py                # Setup script for setuptools (for backward compatibility)\n</code></pre>","tags":["dev","development"]},{"location":"dev/related-projects/","title":"\ud83d\uddc2 Related Projects","text":"<p>This section lists related projects or sub-module projects that are part of this project.</p>","tags":["dev","development"]},{"location":"dev/roadmap/","title":"\ud83d\udee4 Roadmap","text":"<p>This project is still in its early stages of development.</p> <p>The following is a list of features that are planned for future releases:</p>","tags":["dev","development"]},{"location":"dev/sitemap/","title":"\ud83d\uddfa\ufe0f Sitemap","text":"<ul> <li>Home</li> <li>Getting Started<ul> <li>Prerequisites</li> <li>Installation</li> <li>Configuration</li> <li>Examples</li> <li>Error Codes</li> </ul> </li> <li>API Documentation<ul> <li>MyClass</li> </ul> </li> <li>Development<ul> <li>Test</li> <li>Build</li> <li>Docs</li> <li>Scripts<ul> <li>clean.sh</li> <li>get-version.sh</li> <li>test.sh</li> <li>bump-version.sh</li> <li>build.sh</li> <li>release.sh</li> <li>changelog.sh</li> <li>diagrams.sh</li> <li>docs.sh</li> </ul> </li> <li>CI/CD<ul> <li>1.bump-version.yml</li> <li>2.build-publish.yml</li> <li>3.update-changelog.yml</li> <li>publish-docs.yml</li> </ul> </li> <li>Diagrams</li> <li>File Structure</li> <li>Sitemap</li> <li>Related Projects</li> <li>Contributing</li> <li>Roadmap</li> </ul> </li> <li>Research<ul> <li>Reports</li> <li>Benchmarks</li> <li>References</li> </ul> </li> <li>Release Notes</li> <li>Blog</li> <li>About<ul> <li>FAQ</li> <li>Authors</li> <li>Contact</li> <li>License</li> </ul> </li> </ul>","tags":["dev","development"]},{"location":"dev/test/","title":"\ud83e\uddea Test","text":"<p>To run tests, run the following command:</p> <pre><code># Install python test dependencies:\npip install -r ./requirements/requirements.test.txt\n\n# Run tests:\npython -m pytest -sv -o log_cli=true\n# Or use the test script:\n./scripts/test.sh -l -v -c\n</code></pre>","tags":["dev","development"]},{"location":"dev/test/#pytest","title":"Pytest","text":"<pre><code># Install pytest:\npip install -U pytest pytest-cov pytest-xdist pytest-benchmark\n\n# Run tests:\npython -m pytest\n\n# Pytest help:\npython -m pytest --help\n</code></pre>","tags":["dev","development"]},{"location":"dev/test/#references","title":"References","text":"<ul> <li>Pytest Documentation</li> <li>Pytest Getting Started</li> <li>Pytest Fixtures</li> <li>Blogs:<ul> <li>https://docs.pytest.org/en/latest/goodpractices.html</li> <li>https://emimartin.me/pytest_best_practices</li> <li>https://esaezgil.com/post/unittesting_pitfalls</li> <li>https://pytest-with-eric.com/mocking/pytest-common-mocking-problems</li> </ul> </li> </ul>","tags":["dev","development"]},{"location":"dev/cicd/","title":"\ud83d\udc77 CI/CD","text":"<p>This section provides information on how to setup and configure CI/CD pipelines for this project.</p>","tags":["dev","development","cicd"]},{"location":"dev/cicd/#github-actions","title":"GitHub Actions","text":"<ul> <li><code>1.bump-version.yml</code>: Bumps the project version.</li> <li><code>2.build-publish.yml</code>: Builds, publishes and creates release of python package.</li> <li><code>3.update-changelog.yml</code>: Updates the changelog.</li> <li><code>publish-docs.yml</code>: Publishes the documentation.</li> </ul>","tags":["dev","development","cicd"]},{"location":"dev/cicd/#references","title":"References","text":"<ul> <li>GitHub Actions Documentation</li> <li>GitHub Actions Marketplace</li> </ul>","tags":["dev","development","cicd"]},{"location":"dev/cicd/1.bump-version/","title":"\u2b06\ufe0f Bump Version","text":"","tags":["dev","development","cicd"]},{"location":"dev/cicd/1.bump-version/#overview","title":"Overview","text":"<p>This GitHub Action automates the process of bumping the project version. It allows users to choose whether to increment the version as a patch, minor, or major release. This workflow consists of two main jobs:</p> <ol> <li>Test: Runs tests before bumping the version.</li> <li>Bump Version: Increases the project version and commits the changes.</li> </ol>","tags":["dev","development","cicd"]},{"location":"dev/cicd/1.bump-version/#how-it-works","title":"How It Works","text":"<p>The workflow is triggered manually via GitHub's <code>workflow_dispatch</code> event. Users must select the type of version bump before execution.</p>","tags":["dev","development","cicd"]},{"location":"dev/cicd/1.bump-version/#workflow-configuration","title":"Workflow Configuration","text":"","tags":["dev","development","cicd"]},{"location":"dev/cicd/1.bump-version/#trigger","title":"Trigger","text":"<p>The action is triggered manually by dispatching a workflow with an input parameter <code>bump_type</code>, which can have one of the following values:</p> <ul> <li><code>patch</code></li> <li><code>minor</code></li> <li><code>major</code></li> </ul>","tags":["dev","development","cicd"]},{"location":"dev/cicd/1.bump-version/#jobs","title":"Jobs","text":"","tags":["dev","development","cicd"]},{"location":"dev/cicd/1.bump-version/#1-test-11-test","title":"1. Test (1.1. Test)","text":"<p>This job ensures the code is tested before making version changes.</p> <ul> <li>Runs on: <code>ubuntu-24.04</code></li> <li>Permissions: <code>contents: read</code></li> <li>Steps:<ol> <li>Checkout the repository</li> <li>Install dependencies (from <code>requirements/requirements.test.txt</code>)</li> <li>Run tests using <code>pytest</code> via <code>./scripts/test.sh -l</code></li> </ol> </li> </ul>","tags":["dev","development","cicd"]},{"location":"dev/cicd/1.bump-version/#2-bump-version-12-bump-version","title":"2. Bump Version (1.2. Bump Version)","text":"<p>This job updates the project version after tests pass.</p> <ul> <li>Runs on: <code>ubuntu-24.04</code></li> <li>Permissions: <code>contents: write</code></li> <li>Steps:<ol> <li>Checkout the repository (with full history)</li> <li>Bump the version using <code>./scripts/bump-version.sh</code></li> <li>Commits and pushes changes using GitHub Actions bot</li> </ol> </li> </ul>","tags":["dev","development","cicd"]},{"location":"dev/cicd/1.bump-version/#usage","title":"Usage","text":"<p>To manually trigger this workflow:</p> <ol> <li>Navigate to the repository on GitHub.</li> <li>Go to the Actions tab.</li> <li>Select \"1. Bump Version\" from the list.</li> <li>Click \"Run workflow\".</li> <li>Choose a version bump type (<code>patch</code>, <code>minor</code>, or <code>major</code>).</li> <li>Click \"Run workflow\" to start the process.</li> </ol>","tags":["dev","development","cicd"]},{"location":"dev/cicd/1.bump-version/#environment-variables","title":"Environment Variables","text":"<p>The workflow uses the following environment variables:</p> <ul> <li><code>GITHUB_TOKEN</code>: GitHub-provided authentication token for making commits.</li> </ul>","tags":["dev","development","cicd"]},{"location":"dev/cicd/1.bump-version/#scripts-used","title":"Scripts Used","text":"<ul> <li><code>test.sh</code>: Runs the test suite.</li> <li><code>bump-version.sh</code>: Handles version incrementing.</li> </ul>","tags":["dev","development","cicd"]},{"location":"dev/cicd/1.bump-version/#notes","title":"Notes","text":"<ul> <li>Ensure that <code>bump-version.sh</code> supports <code>-b</code>, <code>-c</code>, and <code>-p</code> options.</li> <li>The workflow ensures that version bumping occurs only if tests pass.</li> <li>The changes are committed and pushed automatically to the repository.</li> </ul>","tags":["dev","development","cicd"]},{"location":"dev/cicd/1.bump-version/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>If the workflow fails in the <code>test</code> step, check test logs for errors.</li> <li>If version bumping fails, ensure <code>bump-version.sh</code> is executable and correctly configured.</li> <li>If permissions errors occur, verify that GitHub Actions has the required <code>contents: write</code> permission.</li> </ul>","tags":["dev","development","cicd"]},{"location":"dev/cicd/2.build-publish/","title":"\ud83d\ude80 Build and Publish","text":"","tags":["dev","development","cicd"]},{"location":"dev/cicd/2.build-publish/#overview","title":"Overview","text":"<p>This GitHub Action automates the process of building and publishing the project. It triggers automatically after a version bump or when a tag (<code>v*.*.*</code>) is pushed. The workflow builds the package and optionally publishes it to a package registry.</p>","tags":["dev","development","cicd"]},{"location":"dev/cicd/2.build-publish/#how-it-works","title":"How It Works","text":"<p>The workflow runs in the following scenarios:</p> <ul> <li>After Bump Version workflow completes.</li> <li>When a new tag (<code>v*.*.*</code>) is pushed to the repository.</li> </ul>","tags":["dev","development","cicd"]},{"location":"dev/cicd/2.build-publish/#workflow-configuration","title":"Workflow Configuration","text":"","tags":["dev","development","cicd"]},{"location":"dev/cicd/2.build-publish/#trigger","title":"Trigger","text":"<ul> <li>Triggered by:<ul> <li>Completion of <code>1. Bump Version</code> workflow.</li> <li>Push event on tags matching <code>v*.*.*</code>.</li> </ul> </li> </ul>","tags":["dev","development","cicd"]},{"location":"dev/cicd/2.build-publish/#jobs","title":"Jobs","text":"","tags":["dev","development","cicd"]},{"location":"dev/cicd/2.build-publish/#1-build-and-publish","title":"1. Build and Publish","text":"<p>This job builds the package and creates a release.</p> <ul> <li>Runs on: <code>ubuntu-24.04</code></li> <li>Permissions: <code>contents: write</code></li> <li>Steps:<ol> <li>Checkout the repository</li> <li>Install dependencies (from <code>requirements/requirements.build.txt</code>)</li> <li>Build the package using <code>./scripts/build.sh -c</code></li> <li>Create a release using GitHub CLI (<code>gh release create</code>)</li> </ol> </li> </ul>","tags":["dev","development","cicd"]},{"location":"dev/cicd/2.build-publish/#usage","title":"Usage","text":"<p>This workflow runs automatically when a new version is tagged. However, you can manually trigger a tag and push it:</p> <ol> <li>Bump the version using the <code>1. Bump Version</code> workflow.</li> <li> <p>Create a tag manually and push it:</p> <pre><code>git tag v1.2.3\ngit push origin v1.2.3\n</code></pre> </li> <li> <p>The workflow will build and publish the package.</p> </li> </ol>","tags":["dev","development","cicd"]},{"location":"dev/cicd/2.build-publish/#environment-variables","title":"Environment Variables","text":"<ul> <li><code>GITHUB_TOKEN</code>: Used for creating GitHub releases.</li> <li><code>PYPI_API_TOKEN</code> (if enabled): Used for publishing packages to PyPI.</li> </ul>","tags":["dev","development","cicd"]},{"location":"dev/cicd/2.build-publish/#scripts-used","title":"Scripts Used","text":"<ul> <li><code>build.sh</code>: Builds the package.</li> <li><code>get-version.sh</code>: Retrieves the current version.</li> </ul>","tags":["dev","development","cicd"]},{"location":"dev/cicd/2.build-publish/#notes","title":"Notes","text":"<ul> <li>This workflow supports both GitHub Releases and optional package publishing.</li> <li>Ensure <code>build.sh</code> is executable and correctly configured.</li> <li>If the workflow fails, check logs for errors related to dependencies or authentication.</li> </ul>","tags":["dev","development","cicd"]},{"location":"dev/cicd/2.build-publish/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>If the build step fails, ensure dependencies are correctly installed.</li> <li>If release creation fails, verify that <code>GITHUB_TOKEN</code> has the necessary permissions.</li> <li>If publishing to PyPI fails, check that the API token is correctly set up in repository secrets.</li> </ul>","tags":["dev","development","cicd"]},{"location":"dev/cicd/3.update-changelog/","title":"\ud83d\udca5 Update Changelog","text":"","tags":["dev","development","cicd"]},{"location":"dev/cicd/3.update-changelog/#overview","title":"Overview","text":"<p>This GitHub Action automates the process of updating the changelog after a new release is built and published. It ensures that the changelog remains up to date with the latest changes in the repository.</p>","tags":["dev","development","cicd"]},{"location":"dev/cicd/3.update-changelog/#how-it-works","title":"How It Works","text":"<p>The workflow is triggered automatically after the Build and Publish workflow is successfully completed.</p>","tags":["dev","development","cicd"]},{"location":"dev/cicd/3.update-changelog/#workflow-configuration","title":"Workflow Configuration","text":"","tags":["dev","development","cicd"]},{"location":"dev/cicd/3.update-changelog/#trigger","title":"Trigger","text":"<ul> <li>Triggered by:<ul> <li>Completion of <code>2. Build and Publish</code> workflow.</li> </ul> </li> </ul>","tags":["dev","development","cicd"]},{"location":"dev/cicd/3.update-changelog/#jobs","title":"Jobs","text":"","tags":["dev","development","cicd"]},{"location":"dev/cicd/3.update-changelog/#1-update-changelog","title":"1. Update Changelog","text":"<p>This job updates the changelog after a new release.</p> <ul> <li>Runs on: <code>ubuntu-24.04</code></li> <li>Permissions: <code>contents: write</code></li> <li>Steps:<ol> <li>Checkout the repository (with full history for changelog updates)</li> <li>Update the changelog using <code>./scripts/changelog.sh -c -p</code></li> <li>Commits and pushes changes using GitHub Actions bot</li> </ol> </li> </ul>","tags":["dev","development","cicd"]},{"location":"dev/cicd/3.update-changelog/#usage","title":"Usage","text":"<p>This workflow runs automatically when a new release is created. However, you can manually update the changelog by running the script locally:</p> <pre><code>./scripts/changelog.sh -c -p\n</code></pre>","tags":["dev","development","cicd"]},{"location":"dev/cicd/3.update-changelog/#environment-variables","title":"Environment Variables","text":"<ul> <li><code>GITHUB_TOKEN</code>: Used for authentication and committing changes.</li> </ul>","tags":["dev","development","cicd"]},{"location":"dev/cicd/3.update-changelog/#scripts-used","title":"Scripts Used","text":"<ul> <li><code>changelog.sh</code>: Updates the changelog file.</li> </ul>","tags":["dev","development","cicd"]},{"location":"dev/cicd/3.update-changelog/#notes","title":"Notes","text":"<ul> <li>Ensure that <code>changelog.sh</code> is executable and correctly configured.</li> <li>The workflow ensures that changelog updates occur only after a successful release build.</li> <li>The changes are committed and pushed automatically to the repository.</li> </ul>","tags":["dev","development","cicd"]},{"location":"dev/cicd/3.update-changelog/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>If the workflow fails, ensure that <code>changelog.sh</code> is present and executable.</li> <li>If there are permissions errors, verify that GitHub Actions has the required <code>contents: write</code> permission.</li> <li>Check logs for any issues related to Git authentication or script execution.</li> </ul>","tags":["dev","development","cicd"]},{"location":"dev/cicd/publish-docs/","title":"\ud83d\udcdd Publish Docs","text":"","tags":["dev","development","cicd"]},{"location":"dev/cicd/publish-docs/#overview","title":"Overview","text":"<p>This GitHub Action automates the process of publishing documentation using MkDocs whenever changes are pushed to the <code>main</code> branch. It ensures that the latest documentation is deployed automatically.</p>","tags":["dev","development","cicd"]},{"location":"dev/cicd/publish-docs/#how-it-works","title":"How It Works","text":"<p>The workflow is triggered when changes are made to:</p> <ul> <li>The <code>docs/</code> directory.</li> <li>The <code>mkdocs.yml</code> configuration file.</li> </ul>","tags":["dev","development","cicd"]},{"location":"dev/cicd/publish-docs/#workflow-configuration","title":"Workflow Configuration","text":"","tags":["dev","development","cicd"]},{"location":"dev/cicd/publish-docs/#trigger","title":"Trigger","text":"<ul> <li>Triggered by:<ul> <li>A push event to the <code>main</code> branch that modifies documentation files.</li> </ul> </li> </ul>","tags":["dev","development","cicd"]},{"location":"dev/cicd/publish-docs/#jobs","title":"Jobs","text":"","tags":["dev","development","cicd"]},{"location":"dev/cicd/publish-docs/#1-publish-docs","title":"1. Publish Docs","text":"<p>This job builds and deploys the documentation using MkDocs.</p> <ul> <li>Runs on: <code>ubuntu-24.04</code></li> <li>Permissions: <code>contents: write</code></li> <li>Steps:<ol> <li>Checkout the repository (with full history for proper deployment tracking).</li> <li>Install dependencies from <code>requirements/requirements.docs.txt</code></li> <li>Publish the documentation using <code>mkdocs gh-deploy --force</code></li> </ol> </li> </ul>","tags":["dev","development","cicd"]},{"location":"dev/cicd/publish-docs/#usage","title":"Usage","text":"<p>This workflow runs automatically when changes are pushed to the <code>main</code> branch. However, you can manually deploy the documentation by running the following command locally:</p> <pre><code>mkdocs gh-deploy --force\n</code></pre>","tags":["dev","development","cicd"]},{"location":"dev/cicd/publish-docs/#environment-variables","title":"Environment Variables","text":"<ul> <li><code>GITHUB_TOKEN</code>: Used for authentication and deploying the documentation.</li> </ul>","tags":["dev","development","cicd"]},{"location":"dev/cicd/publish-docs/#scripts-used","title":"Scripts Used","text":"<ul> <li><code>mkdocs.yml</code>: Configuration file for MkDocs.</li> <li>Files in <code>docs/</code>: Documentation content.</li> </ul>","tags":["dev","development","cicd"]},{"location":"dev/cicd/publish-docs/#notes","title":"Notes","text":"<ul> <li>Ensure that <code>mkdocs</code> and required dependencies are correctly installed in <code>requirements.docs.txt</code>.</li> <li>The workflow ensures that documentation updates occur only when relevant files are modified.</li> <li>The changes are committed and published automatically to GitHub Pages.</li> </ul>","tags":["dev","development","cicd"]},{"location":"dev/cicd/publish-docs/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>If the workflow fails, ensure that <code>mkdocs</code> is properly installed and configured.</li> <li>If deployment issues occur, verify that GitHub Actions has the required <code>contents: write</code> permission.</li> <li>Check logs for any issues related to Git authentication or MkDocs execution.</li> </ul>","tags":["dev","development","cicd"]},{"location":"dev/scripts/","title":"\ud83d\udd28 Scripts","text":"<p>This document provides an overview and usage instructions for the following scripts in this project:</p> <ul> <li><code>clean.sh</code></li> <li><code>get-version.sh</code></li> <li><code>test.sh</code></li> <li><code>bump-version.sh</code></li> <li><code>build.sh</code></li> <li><code>release.sh</code></li> <li><code>changelog.sh</code></li> <li><code>diagrams.sh</code></li> <li><code>docs.sh</code></li> </ul> <p>All the scripts are located in the <code>scripts</code> directory:</p> <pre><code>scripts/\n\u251c\u2500\u2500 build.sh\n\u251c\u2500\u2500 bump-version.sh\n\u251c\u2500\u2500 changelog.sh\n\u251c\u2500\u2500 clean.sh\n\u251c\u2500\u2500 diagrams.sh\n\u251c\u2500\u2500 docs.sh\n\u251c\u2500\u2500 get-version.sh\n\u251c\u2500\u2500 release.sh\n\u2514\u2500\u2500 test.sh\n</code></pre> <p>These scripts are designed to be used in a Linux or macOS environment. They may work in a Windows environment with the appropriate tools installed, but this is not guaranteed.</p>","tags":["dev","development","scripts"]},{"location":"dev/scripts/build.sh/","title":"\ud83c\udfd7\ufe0f build.sh","text":"<p>This script is used to build a Python project and optionally run tests and publish the package. It also includes a cleaning operation to clear the build directories.</p> <p>This script has the following key features:</p> <ul> <li>Checking for required tools: It verifies if Python and the build package are installed on the system. If tests are not disabled, it also checks if pytest is installed. If uploading is enabled, it checks for the presence of Twine.</li> <li>Command-line argument parsing: It parses <code>-c</code> or <code>--disable-clean</code> to disable cleaning the build directories, <code>-t</code> or <code>--test</code> to enable running tests, <code>-u</code> or <code>--upload</code> to enable publishing the package, and <code>-p</code> or <code>--production</code> to switch the package repository from staging (default) to production.</li> <li>Clean operation: Cleans the build directories before and after building (if enabled). If <code>-c</code> or <code>--disable-clean</code> is passed, the script will not clean the build directories.</li> <li>Testing operation: Runs pytest tests if enabled by <code>-t</code> or <code>--test</code> flag.</li> <li>Build operation: Builds a Python package using the Python build package.</li> <li>Publishing operation: Publishes the built package to a PyPi repository using Twine if the <code>-u</code> or <code>--upload</code> flag is passed. Defaults to the TestPyPi (staging) repository, but can be switched to the production (PyPi) repository using the <code>-p</code> or <code>--production</code> flag.</li> </ul> <p>Usage:</p> <p>To execute the build script with the different flags, use the following commands:</p> <pre><code>./build.sh [-c|--disable-clean] [-t|--test] [-u|--upload] [-p|--production]\n</code></pre> <p>Examples:</p> <ul> <li>To build without cleaning: <code>./build.sh -c</code></li> <li>To build with running tests: <code>./build.sh -t</code></li> <li>To build and publish to the staging repository: <code>./build.sh -u</code></li> <li>To build and publish to the production repository: <code>./build.sh -u -p</code></li> </ul> <p>This script is particularly beneficial for developers, streamlining the build, testing, and publishing process. It provides a one-stop solution for all the build needs of a Python project, reducing chances of errors and ensuring consistency.</p>","tags":["dev","development","scripts"]},{"location":"dev/scripts/bump-version.sh/","title":"\ud83c\udff7 bump-version.sh","text":"<p>This script is used to manage the versioning of the project. It allows you to increment the major, minor, or patch part of the version, as per Semantic Versioning rules.</p> <p>The script carries out the following operations:</p> <ul> <li>Loading environment variables: If a <code>.env</code> file is present in the root directory, the script loads the environment variables from this file.</li> <li>Sets variables: Sets the <code>VERSION_FILE_PATH</code> and other variables. The <code>VERSION_FILE_PATH</code> variable is either loaded from the environment or defaults to <code>src/potato_utils/__version__.py</code>.</li> <li>Parses input arguments: It parses the <code>-b</code> or <code>--bump-type</code> argument for the type of version bump (<code>major</code>, <code>minor</code>, or <code>patch</code>) and <code>-p</code> or <code>--push-tag</code> to decide whether to push the tag to the Git repository or not.</li> <li>Checks and increments the version: It uses <code>get-version.sh</code> to extract the current version from the file specified by <code>VERSION_FILE_PATH</code>. Based on the bump type, it increments the appropriate part of the version and writes the new version back to the file.</li> <li>Commits and tags: If the <code>-p</code> or <code>--push-tag</code> flag was provided, it adds and commits the changes, pushes the changes, creates a new tag with the new version, and pushes the tag to the Git repository. It will prevent the operation if the tag already exists.</li> </ul> <p>Usage:</p> <p>To execute the bump version script, run the following command in the terminal:</p> <pre><code>./bump-version.sh -b=&lt;bump_type&gt; -p\n</code></pre> <p>Replace <code>&lt;bump_type&gt;</code> with either <code>major</code>, <code>minor</code>, or <code>patch</code> to indicate which part of the version to increment. The <code>-p</code> or <code>--push-tag</code> flag tells the script to commit the changes and push the tag to the Git repository.</p> <p>Examples:</p> <p>To bump the <code>minor</code> version and push the new tag, run:</p> <pre><code>./bump-version.sh -b=minor -p\n</code></pre> <p>This script streamlines the versioning process, reducing the chances of errors and ensuring consistency in versioning.</p>","tags":["dev","development","scripts"]},{"location":"dev/scripts/bump-version.sh/#references","title":"References","text":"<ul> <li>https://semver.org</li> </ul>","tags":["dev","development","scripts"]},{"location":"dev/scripts/changelog.sh/","title":"\ud83d\udccc changelog.sh","text":"<p>This script automates updating both a <code>CHANGELOG.md</code> file and a <code>docs/release-notes.md</code> file using release information fetched from GitHub. It ensures consistent release documentation across the project and optionally commits and pushes changes to the Git repository.</p> <p>The script performs the following operations:</p> <ul> <li>Environment setup:  <ul> <li>Runs from the project root.  </li> <li>Loads environment variables from a <code>.env</code> file if present.  </li> </ul> </li> <li>Dependency checks:  <ul> <li>Ensures the GitHub CLI (<code>gh</code>) is installed and authenticated.  </li> <li>If <code>--commit</code> is specified, verifies that <code>git</code> is available.  </li> </ul> </li> <li>Variables setup:  <ul> <li><code>CHANGELOG_FILE_PATH</code> \u2192 Path to the changelog file (default: <code>./CHANGELOG.md</code>).  </li> <li><code>RELEASE_NOTES_FILE_PATH</code> \u2192 Path to the release notes file (default: <code>./docs/release-notes.md</code>).  </li> </ul> </li> <li>Input parsing:  <ul> <li><code>-c</code> or <code>--commit</code>: Commit changelog and release notes updates.  </li> <li><code>-p</code> or <code>--push</code>: Push updates to the remote repository (requires <code>-c</code>).  </li> </ul> </li> <li>Changelog update:  <ul> <li>Fetches the latest release tag and body from GitHub (<code>gh release view</code>).  </li> <li>Updates <code>CHANGELOG.md</code> with a new section for the latest release, including date and notes.  </li> </ul> </li> <li>Release notes update:  <ul> <li>Updates <code>docs/release-notes.md</code> with a formatted entry for the latest release.  </li> <li>Adds a YAML front matter block and header if the file does not already exist.  </li> </ul> </li> <li>Commit and push (optional):  <ul> <li>If <code>-c</code> is provided, stages and commits both updated files with a commit message.  </li> <li>If <code>-p</code> is also provided, pushes the commit to the remote repository.</li> </ul> </li> </ul>","tags":["dev","development","scripts"]},{"location":"dev/scripts/changelog.sh/#usage","title":"Usage","text":"<p>To execute <code>changelog.sh</code>, run:</p> <pre><code>./changelog.sh [-c|--commit] [-p|--push]\n</code></pre>","tags":["dev","development","scripts"]},{"location":"dev/scripts/clean.sh/","title":"\ud83e\uddf9 clean.sh","text":"<p>This script is designed to clean up the build environment by removing artifacts and other temporary or unwanted files and directories.</p> <p>The script performs the following operations:</p> <ul> <li>Delete system files: Finds and deletes all <code>.DS_Store</code> and <code>.Thumbs.db</code> files in the project directory and its subdirectories.</li> <li>Delete cache directories: Finds and deletes all <code>__pycache__</code> directories in the project directory and its subdirectories.</li> <li>Delete project-related directories: Removes directories created during the test and build process or by tools used in the project, such as <code>.benchmarks</code>, <code>.pytest_cache</code>, <code>build</code>, and <code>dist</code> directories.</li> <li>Delete <code>.coverage</code> file: Removes the <code>.coverage</code> file that's created when coverage information is collected for the project.</li> </ul> <p>Usage:</p> <p>To execute the clean script, simply run the following command in the terminal:</p> <pre><code>./clean.sh [-a|--all]\n</code></pre> <p>Examples:</p> <ul> <li>To clean just non-essential files: <code>./clean.sh</code></li> <li>To clean all files: <code>./clean.sh -a</code></li> </ul> <p>This will clean up the project directory, removing any unnecessary files and directories and ensuring a clean environment for a fresh build.</p>","tags":["dev","development","scripts"]},{"location":"dev/scripts/diagrams.sh/","title":"\ud83d\uddbc\ufe0f diagrams.sh","text":"<p>This script generates UML diagrams for a specified Python module using <code>pyreverse</code>. It checks for dependencies, loads environment variables, sets directories, and processes command-line arguments for customization of module names, directories, and output locations.</p>","tags":["dev","development","scripts"]},{"location":"dev/scripts/diagrams.sh/#overview","title":"Overview","text":"<p>The script performs the following operations:</p> <ul> <li> <p>Dependency Checks: Verifies the presence of required tools:</p> <ul> <li><code>graphviz</code> for <code>.dot</code> file handling.</li> <li><code>python</code> for running Python-based commands.</li> <li><code>pylint</code> (with <code>pyreverse</code>) for generating UML diagrams.</li> </ul> </li> <li> <p>Environment Variable Setup: Sets default values for module name, module directory, and output directory (<code>MODULE_NAME</code>, <code>MODULE_DIR</code>, <code>OUTPUT_DIR</code>). These can be customized via environment variables or command-line arguments.</p> </li> <li> <p>Argument Parsing: Parses optional arguments to allow customization:</p> <ul> <li><code>-m</code> or <code>--module-name</code> to specify the module name.</li> <li><code>-d</code> or <code>--module-dir</code> to specify the module directory.</li> <li><code>-o</code> or <code>--output-dir</code> to specify the output directory.</li> </ul> </li> <li> <p>Directory Creation: Creates subdirectories within the output directory for organizing different types of UML and flowchart outputs:</p> <ul> <li><code>classes</code> for class diagrams.</li> <li><code>packages</code> for package diagrams.</li> </ul> </li> <li> <p>Diagram Generation: Runs <code>pyreverse</code> to create UML diagrams in multiple formats (<code>html</code>, <code>pdf</code>, <code>png</code>, and <code>svg</code>) and organizes them into respective directories.</p> </li> <li> <p>Completion Message: Displays a message confirming successful generation of diagrams.</p> </li> </ul>","tags":["dev","development","scripts"]},{"location":"dev/scripts/diagrams.sh/#usage","title":"Usage","text":"<p>To run the script:</p> <pre><code>./diagrams.sh -m=&lt;module_name&gt; -d=&lt;module_dir&gt; -o=&lt;output_dir&gt;\n</code></pre>","tags":["dev","development","scripts"]},{"location":"dev/scripts/docs.sh/","title":"\ud83d\udcdd docs.sh","text":"<p>This script is used to manage the documentation for the project, providing options to either serve a local documentation server or build the documentation as static HTML files.</p> <p>The script performs the following operations:</p> <ul> <li>Serving documentation: If no flags are set, runs <code>mkdocs serve</code> to start a local documentation server for live preview.</li> <li>Building documentation: If the <code>-b</code> or <code>--build</code> flag is set, the script builds the documentation as static HTML files using <code>mkdocs build</code>, placing the output in the <code>site</code> directory.</li> <li>Publishing documentation: If the <code>-p</code> or <code>--publish</code> flag is set, the script can be extended to publish the documentation to GitHub Pages.</li> </ul> <p>Usage:</p> <p>To execute the documentation script, use the following command in the terminal:</p> <pre><code>./docs.sh [-b|--build] [-p|--publish]\n</code></pre> <p>Examples:</p> <ul> <li>To serve the documentation: <code>./docs.sh</code></li> <li>To build the documentation: <code>./docs.sh -b</code></li> <li>To publish the documentation: <code>./docs.sh -p</code></li> </ul>","tags":["dev","development","scripts"]},{"location":"dev/scripts/get-version.sh/","title":"\ud83d\udd0d get-version.sh","text":"<p>This script is used to retrieve the current version of the application from a specified version file.</p> <p>The script performs the following operations:</p> <ul> <li><code>VERSION_FILE_PATH</code> is either loaded from the environment or, if it's not present in the environment, it defaults to <code>src/potato_utils/__version__.py</code>.</li> <li>It first checks if the <code>VERSION_FILE_PATH</code> variable is not empty and if the file exists. If these conditions are met, it retrieves the value of <code>__version__</code> from the file by using <code>grep</code>, <code>awk</code>, and <code>tr</code> commands. The <code>grep</code> command filters the line containing <code>__version__ =</code> , the <code>awk</code> command splits the line into two parts at <code>=</code>, and the <code>tr</code> command removes the quotes around the version. If these operations fail, it exits the script with status code <code>2</code>.</li> <li>If the <code>VERSION_FILE_PATH</code> variable is empty or the file does not exist, it sets the current version to <code>0.0.0</code>.</li> <li>Finally, it echoes the current version to the console.</li> </ul> <p>Usage:</p> <p>To execute the get version script, simply run the following command in the terminal:</p> <pre><code>./get-version.sh\n</code></pre> <p>This script can be used to conveniently fetch the version. It is used by the <code>bump-version.sh</code> script to retrieve the current version before incrementing it.</p>","tags":["dev","development","scripts"]},{"location":"dev/scripts/release.sh/","title":"\ud83d\ude80 release.sh","text":"<p>This script automates the creation of GitHub Releases for the project. It optionally performs a build, retrieves the current version, and uploads artifacts from the <code>dist</code> directory to a new GitHub Release with autogenerated notes.</p> <p>The script performs the following operations:</p> <ul> <li>Environment setup:   Ensures it runs from the project root and sources environment variables from <code>.env</code> if available.</li> <li>Dependency checks:   Verifies that <code>git</code> and <code>gh</code> (GitHub CLI) are installed, and that the user is authenticated with <code>gh auth login</code>.</li> <li>Optional build:   If the <code>-b</code> or <code>--build</code> flag is set, runs <code>./scripts/build.sh -c</code> before release.</li> <li>Versioning:   Uses <code>./scripts/get-version.sh</code> to determine the release version.</li> <li>Release creation:   Runs <code>gh release create v&lt;version&gt; ./dist/* --generate-notes</code> to publish a new GitHub Release with attached artifacts.</li> </ul> <p>Usage:</p> <p>To execute the release script, use the following command in the terminal:</p> <pre><code>./release.sh [-b|--build]\n</code></pre> <p>Examples:</p> <ul> <li>To create a release using existing build artifacts: <code>./release.sh</code></li> <li>To build the project first, then create the release: <code>./release.sh -b</code></li> </ul> <p>Notes:</p> <ul> <li>A .env file is optional but will be loaded if present.</li> <li>The dist/ directory must contain the build artifacts before release.</li> <li>The release tag will be prefixed with v (e.g., v1.2.3).</li> </ul>","tags":["dev","development","scripts"]},{"location":"dev/scripts/test.sh/","title":"\ud83e\uddea test.sh","text":"<p>This script is used to run the pytest tests for the project.</p> <p>The script performs the following operations:</p> <ul> <li>Running pytest: Runs the pytest tests for the project.</li> <li>Logging: If the <code>-l</code> or <code>--log</code> option is provided, the script will log the output of the pytest tests to console.</li> <li>Coverage: If the <code>-c</code> or <code>--cov</code> option is provided, the script will run the pytest tests with coverage.</li> <li>Verbose: If the <code>-v</code> or <code>--verbose</code> option is provided, the script will run the pytest tests with verbose error outputs.</li> </ul> <p>Usage:</p> <p>To execute the test script, simply run the following command in the terminal:</p> <pre><code>./test.sh [-l|--log] [-c|--cov] [-v|--verbose]\n</code></pre> <p>Examples:</p> <ul> <li>To test: <code>./test.sh</code></li> <li>To test with logging: <code>./test.sh -l</code></li> <li>To test with coverage: <code>./test.sh -c</code></li> <li>To test with verbose: <code>./test.sh -v</code></li> <li>To test with logging, coverage and verbose: <code>./test.sh -l -c -v</code></li> </ul> <p>This script will run the pytest tests for the project. It can also be used to run the tests with logging, coverage, and verbose options.</p>","tags":["dev","development","scripts"]},{"location":"dev/scripts/test.sh/#references","title":"References","text":"<ul> <li>https://docs.pytest.org</li> </ul>","tags":["dev","development","scripts"]},{"location":"getting-started/configuration/","title":"\u2699\ufe0f Configuration","text":"<p><code>templates/configs/config.yml</code>:</p> <pre><code>potato_utils:\n  min_length: 2\n  max_length: 100\n  min_value: 0.0\n  max_value: 1.0\n  threshold: 0.5\n</code></pre>","tags":["getting-started"]},{"location":"getting-started/configuration/#environment-variables","title":"\ud83c\udf0e Environment Variables","text":"<p><code>.env.example</code>:</p> <pre><code># ENV=LOCAL\n# DEBUG=false\n# TZ=UTC\n</code></pre>","tags":["getting-started"]},{"location":"getting-started/error-codes/","title":"\ud83d\udea8 Error Codes","text":"","tags":["getting-started"]},{"location":"getting-started/error-codes/#error-handling","title":"Error Handling","text":"<p>Pydantic will raise a <code>ValidationError</code> whenever it finds an error in the data it's validating.</p> <pre><code>from pydantic import ValidationError\n\nfrom potato_utils import MyClass\n\n\ntry:\n    _my_object = MyClass(\n        config={\n            \"min_length\": 0,\n            \"max_length\": \"three\",\n            \"min_value\": True,\n            \"max_value\": [1, 2, 3],\n            \"threshold\": 2.0,\n        }\n    )\nexcept ValidationError as err:\n    print(err)\n</code></pre> <p>The error message will look like this:</p> <pre><code>4 validation errors for MyClassConfigPM\nmin_length\n  Input should be greater than or equal to 1 [type=greater_than_equal, input_value=0, input_type=int]\n    For further information visit https://errors.pydantic.dev/2.10/v/greater_than_equal\nmax_length\n  Input should be a valid integer, unable to parse string as an integer [type=int_parsing, input_value='three', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/int_parsing\nmax_value\n  Input should be a valid number [type=float_type, input_value=[1, 2, 3], input_type=list]\n    For further information visit https://errors.pydantic.dev/2.10/v/float_type\nthreshold\n  Input should be less than or equal to 1 [type=less_than_equal, input_value=2.0, input_type=float]\n    For further information visit https://errors.pydantic.dev/2.10/v/less_than_equal\n</code></pre>","tags":["getting-started"]},{"location":"getting-started/examples/","title":"\ud83d\udeb8 Examples","text":"","tags":["getting-started"]},{"location":"getting-started/examples/#simple","title":"Simple","text":"<p><code>examples/simple/main.py</code>:</p> <pre><code>#!/usr/bin/env python\n\n# Standard libraries\nimport sys\nimport logging\n\n# Internal modules\nfrom potato_utils import MyClass\n\n\nlogger = logging.getLogger(__name__)\n\n\ndef main() -&gt; None:\n    logging.basicConfig(\n        stream=sys.stdout,\n        level=logging.INFO,\n        datefmt=\"%Y-%m-%d %H:%M:%S %z\",\n        format=\"[%(asctime)s | %(levelname)s | %(filename)s:%(lineno)d]: %(message)s\",\n    )\n\n    # Pre-defined variables (for customizing and testing)\n    _items = [0.1, 0.2, 0.3, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\n    _config = {\n        \"min_length\": 4,\n        \"max_length\": 10,\n        \"min_value\": 0.0,\n        \"max_value\": 1.0,\n        \"threshold\": 0.7,\n    }\n\n    # Main example code\n    logger.info(f\"Items before cleaning: {_items}\")\n    _my_object = MyClass(items=_items, config=_config)\n    _items = _my_object.run()\n    logger.info(f\"Items after cleaning: {_items}\")\n\n    logger.info(\"Done!\\n\")\n    return\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>","tags":["getting-started"]},{"location":"getting-started/installation/","title":"\ud83d\udee0 Installation","text":"","tags":["getting-started"]},{"location":"getting-started/installation/#1-download-or-clone-the-repository","title":"1. \ud83d\udce5 Download or clone the repository","text":"<p>[TIP] Skip this step, if you're going to install the package directly from PyPi or GitHub repository.</p> <p>1.1. Prepare projects directory (if not exists):</p> <pre><code># Create projects directory:\nmkdir -pv ~/workspaces/projects\n\n# Enter into projects directory:\ncd ~/workspaces/projects\n</code></pre> <p>1.2. Follow one of the below options [A], [B] or [C]:</p> <p>OPTION A. Clone the repository:</p> <pre><code>git clone https://github.com/bybatkhuu/module.python-utils.git &amp;&amp; \\\n    cd module.python-utils\n</code></pre> <p>OPTION B. Clone the repository (for DEVELOPMENT: git + ssh key):</p> <pre><code>git clone git@github.com:bybatkhuu/module.python-utils.git &amp;&amp; \\\n    cd module.python-utils\n</code></pre> <p>OPTION C. Download source code:</p> <ol> <li>Download archived zip file from releases.</li> <li>Extract it into the projects directory.</li> </ol>","tags":["getting-started"]},{"location":"getting-started/installation/#2-install-the-package","title":"2. \ud83d\udce6 Install the package","text":"<p>[NOTE] Choose one of the following methods to install the package [A ~ F]:</p> <p>OPTION A. [RECOMMENDED] Install from PyPi:</p> <pre><code># Install from staging TestPyPi:\npip install -i https://test.pypi.org/simple -U potato_utils\n\n# Or install from production PyPi:\n# pip install -U potato_utils\n</code></pre> <p>OPTION B. Install latest version directly from GitHub repository:</p> <pre><code>pip install git+https://github.com/bybatkhuu/module.python-utils.git\n</code></pre> <p>OPTION C. Install from the downloaded source code:</p> <pre><code># Install directly from the source code:\npip install .\n\n# Or install with editable mode:\npip install -e .\n</code></pre> <p>OPTION D. Install for DEVELOPMENT environment:</p> <pre><code>pip install -r ./requirements/requirements.dev.txt\n</code></pre> <p>OPTION E. Install from pre-built release files:</p> <ol> <li>Download <code>.whl</code> or <code>.tar.gz</code> file from releases</li> <li>Install with pip:</li> </ol> <pre><code># Install from .whl file:\npip install ./potato_utils-[VERSION]-py3-none-any.whl\n\n# Or install from .tar.gz file:\npip install ./potato_utils-[VERSION].tar.gz\n</code></pre> <p>OPTION F. Copy the module into the project directory (for testing):</p> <pre><code># Install python dependencies:\npip install -r ./requirements.txt\n\n# Copy the module source code into the project:\ncp -r ./src/potato_utils [PROJECT_DIR]\n# For example:\ncp -r ./src/potato_utils /some/path/project/\n</code></pre>","tags":["getting-started"]},{"location":"getting-started/prerequisites/","title":"\ud83d\udea7 Prerequisites","text":"<ul> <li>Install Python (&gt;= v3.10) and pip (&gt;= 23):<ul> <li>[RECOMMENDED]  Miniconda (v3)</li> <li>[arm64/aarch64]  Miniforge (v3)</li> <li>[Python virutal environment]  venv</li> </ul> </li> </ul> <p>[OPTIONAL] For DEVELOPMENT environment:</p> <ul> <li>Install git</li> <li>Setup an SSH key (video tutorial)</li> </ul>","tags":["getting-started"]},{"location":"research/benchmarks/","title":"\ud83d\udcca Benchmarks","text":"<p>This section contains benchmark results of this project.</p>","tags":["rnd","research"]},{"location":"research/references/","title":"\ud83d\udcd1 References","text":"<p>This section contains references to research papers, articles, and other resources related to this project.</p>","tags":["rnd","research"]},{"location":"research/reports/","title":"\ud83d\udcc8 Reports","text":"<p>This section contains result reports related to this project.</p>","tags":["rnd","research"]},{"location":"blog/archive/2025/01/","title":"2025/01","text":"","tags":["blog"]},{"location":"blog/category/category-1/","title":"Category-1","text":"","tags":["blog"]},{"location":"blog/category/category-2/","title":"Category-2","text":"","tags":["blog"]}]}